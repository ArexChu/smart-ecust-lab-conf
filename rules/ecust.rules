//import java.util.Random
//import org.openhab.core.library.items.*
//import java.lang.Integer.*
//import java.lang.Math.*

//var Timer timer = null
//val resList = newArrayList("640/480", "320/240", "480/360")
//val urlList = newArrayList("http://www.fillmurray.com", "http://www.fillmurray.com/g",
//                 "http://www.placecage.com", "http://www.placecage.com/c", "http://www.placecage.com/g")
//val Random random = new Random()

val http_url = "http://raspberrypi:8080/proxy/"
val dimmed_url = "dimmed/leds?color="
val coap_url_4 = "coap://[aaaa::212:4b00:5af:827c]/"
val coap_url_3 = "coap://[aaaa::212:4b00:5af:80d5]/"
val coap_url_2 = "coap://[aaaa::212:4b00:5af:825a]/"
val coap_url_1 = "coap://[aaaa::212:4b00:5af:7f61]/"
val coap_url_0 = "coap://[aaaa::212:4b00:5af:81a0]/"
val video_path = "/home/arex/Videos/"
//val video_script_path = "/home/arex/smart-campus/smart-ecust/conf/automation/"
val video_script_path = "C:/Users/guchengyuan/Desktop/hello/"

//val Number light_rows = 4
//val Number light_cols = 3
//val	x_Light = newArrayList("1", "3", "5", "7")
//val	y_Light = newArrayList("2", "5", "8")
//val	closed_Light = newArrayList

rule "VoiceControl" 

when 
    Item VoiceCommand received command 
then 
	var String command = VoiceCommand.state.toString.toLowerCase
	logInfo("Voice.Rec","VoiceCommand received "+command)
	if (command.contains("on")) {
		Light_FF_r.sendCommand(ON)
	}
end

rule "Switch Seat"
when
    Item Seats received update
then
	//Seats.members.filter[s| s.state.toString == "ON"].forEach[s | 
	//			var x = transform("REGEX", "FF_103_seat_([0-9])(.*)", s.name)
	//			var y = transform("REGEX", "FF_103_seat_" + x + "_([0-9])", s.name)
	//			for (var i = 0; i < light_rows; i++){
	//				for (var j = 0; j < light_cols; j++){
	//					if (Math::abs(Integer::parseInt(x) - Integer::parseInt(x_Light.get(i))) <= 1 && Math::abs(Integer::parseInt(y) - Integer::parseInt(y_Light.get(j))) <= 2){
	//						var x_y_Light = "Light_FF_" + x_Light.get(i) + "_" + y_Light.get(j)
	//						//logInfo("x_y_Light", x_y_Light)
	//						Lights.members.filter[l| l.name == x_y_Light].forEach[l |
	//							//logInfo("test", l.name)
	//							l.sendCommand(ON)
	//						]
	//					}
	//				}
	//			}
	//		]
	//Seats.members.filter[s| s.state.toString == "OFF"].forEach[s | 
	//			var x = transform("REGEX", "FF_103_seat_([0-9])(.*)", s.name)
	//			var y = transform("REGEX", "FF_103_seat_" + x + "_([0-9])", s.name)

	//			var	temp_x = newArrayList("0", "0", "0", "0")
	//			var	temp_y = newArrayList("0", "0", "0", "0")
	//			
	//			var count = 0

	//			//count++
	//			//temp_x.set(count, x_Light.get(1))
	//			//logInfo("arex", temp_x.get(1))

	//			for (var i = 0; i < light_rows; i++){
	//				for (var j = 0; j < light_cols; j++){
	//					if (Math::abs(Integer::parseInt(x) - Integer::parseInt(x_Light.get(i))) <= 1 && Math::abs(Integer::parseInt(y) - Integer::parseInt(y_Light.get(j))) <= 2){
	//						temp_x.set(count, x_Light.get(i))
	//						temp_y.set(count, y_Light.get(j))
	//						count++
	//						//logInfo("arex", temp_x.get(1))
	//					}
	//				}
	//			}

	//			var flag = 0
	//			//logInfo("test", "test")
	//			for (var k = 0; k < count; k++) {
	//				for (var m = Integer::parseInt(temp_x.get(k)) - 1; m < Integer::parseInt(temp_x.get(k)) + 2 && flag == 0; m++) {
	//					for (var n = Integer::parseInt(temp_y.get(k)) - 2; n < Integer::parseInt(temp_y.get(k)) + 3 && flag == 0; n++) {
	//						var m_n_Seat = "FF_103_seat_" + m + "_" + n
	//						logInfo("m_n_Seat", m_n_Seat)
	//						Seats.members.filter[s| s.state.toString == "ON" && s.name == m_n_Seat].forEach[s |
	//							flag = 1
	//						]
	//					}
	//				}
	//				if (flag == 0) {
	//					var x_y_Light = "Light_FF_" + temp_x.get(k) + "_" + temp_y.get(k)
	//					logInfo("x_y_Light", x_y_Light)
	//					Lights.members.filter[l| l.name == x_y_Light].forEach[l |
	//						logInfo("ecust", l.name)
	//						l.sendCommand(OFF)
	//					]
	//				}
	//			}
	//		]
end

rule "Switch Vides"
when
    Item Videos1 received command
then
    if(receivedCommand==ON) {
	executeCommandLine(video_script_path + "open.bat 1.avi")
    } else if(receivedCommand==OFF) {
	executeCommandLine(video_script_path + "kill.bat")
    }
end

rule "Switch Vides"
when
    Item Videos4 received command
then
    if(receivedCommand==ON) {
	executeCommandLine(video_script_path + "openssei.bat")
    } else if(receivedCommand==OFF) {
	executeCommandLine(video_script_path + "killssei.bat")
    }
end

rule "Switch Light 7_2"
when
    Item Light_FF_7_2 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_4 + dimmed_url + "r" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_4 + dimmed_url + "r" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 7_5"
when
    Item Light_FF_7_5 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_4 + dimmed_url + "g" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_4 + dimmed_url + "g" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 7_8"
when
    Item Light_FF_7_8 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_4 + dimmed_url + "b" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_4 + dimmed_url + "b" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 5_2"
when
    Item Light_FF_5_2 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_3 + dimmed_url + "r" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_3 + dimmed_url + "r" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 5_5"
when
    Item Light_FF_5_5 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_3 + dimmed_url + "g" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_3 + dimmed_url + "g" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 5_8"
when
    Item Light_FF_5_8 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_3 + dimmed_url + "b" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_3 + dimmed_url + "b" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 3_2"
when
    Item Light_FF_3_2 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_2 + dimmed_url + "r" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_2 + dimmed_url + "r" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 3_5"
when
    Item Light_FF_3_5 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_2 + dimmed_url + "g" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_2 + dimmed_url + "g" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 3_8"
when
    Item Light_FF_3_8 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_2 + dimmed_url + "b" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_2 + dimmed_url + "b" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 1_2"
when
    Item Light_FF_1_2 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_1 + dimmed_url + "r" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_1 + dimmed_url + "r" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 1_5"
when
    Item Light_FF_1_5 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_1 + dimmed_url + "g" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_1 + dimmed_url + "g" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light 1_8"
when
    Item Light_FF_1_8 received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_1 + dimmed_url + "b" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_1 + dimmed_url + "b" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light l"
when
    Item Light_FF_l received command
then
    if(receivedCommand==ON) {
	//sendNotification("zjfbob@sina.com", "Hello world!")
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_0 + dimmed_url + "g" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_0 + dimmed_url + "g" + "@@-d@@" + "dimmed=100")
    }
end

rule "Switch Light r"
when
    Item Light_FF_r received command
then
    if(receivedCommand==ON) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_0 + dimmed_url + "b" + "@@-d@@" + "dimmed=99")
    } else if(receivedCommand==OFF) {
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_0 + dimmed_url + "b" + "@@-d@@" + "dimmed=100")
    }
end

/**
 * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands
 * and posting an updated state on the bus
 */
rule "Dimmed Light"
	when
		Item DimmedLight received command
	then
	var Number percent = 0
	if(DimmedLight.state instanceof DecimalType) percent = DimmedLight.state as DecimalType
	if(percent<=0)   percent = 1 
	if(percent>=100) percent = 99
	executeCommandLine("curl" + "@@-XPOST@@" + http_url + coap_url_0 + dimmed_url + "g" + "@@-d@@" + "dimmed=" + percent)
end

///**
// * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands
// * and posting an updated state on the bus
// */
//rule "Dimmed Light"
//	when
//		Item DimmedLight received command
//	then
//        if ((receivedCommand==INCREASE) || (receivedCommand==DECREASE)) {
//    		var Number percent = 0
//    		if(DimmedLight.state instanceof DecimalType) percent = DimmedLight.state as DecimalType
//    			
//    		if(receivedCommand==INCREASE) percent = percent + 5
//    		if(receivedCommand==DECREASE) percent = percent - 5
//    
//    		if(percent<0)   percent = 0
//    		if(percent>100) percent = 100
//    		postUpdate(DimmedLight, percent);
//    	}
//end
//
//rule "Timer Demo"
//when
//    Item Light_GF_Corridor_Ceiling received command
//then
//    if(receivedCommand==ON) {
//        if(timer==null) {
//            // first ON command, so create a timer to turn the light off again
//            timer = createTimer(now.plusSeconds(10)) [|
//                sendCommand(Light_GF_Corridor_Ceiling, OFF)
//            ]
//        } else {
//            // subsequent ON command, so reschedule the existing timer
//            timer.reschedule(now.plusSeconds(10))
//        }
//    } else if(receivedCommand==OFF) {
//        // remove any previously scheduled timer
//        if(timer!=null) {
//            timer.cancel
//            timer = null
//        }
//    }
//end
//
///**
// * The following rules help initializing the demo items with some helpful states.
// */
//rule "Initialize light states"
//	when
//		System started
//	then
//		Lights?.members.forEach(light|
//			postUpdate(light, if(Math::random > 0.7) ON else OFF)
//		)
//end
//
//rule "Initialize heating states"
//	when
//		System started
//	then
//		Heating?.members.forEach(heating|
//			postUpdate(heating, if(Math::random > 0.8) ON else OFF)
//		)
//		postUpdate(Temperature_Setpoint, 22)
//end
//
//rule "Initialize contact states"
//	when
//		System started
//	then
//		Windows?.members.forEach(window|
//			postUpdate(window, if(Math::random > 0.5) OPEN else CLOSED)
//		)
//end
//
//rule "Initialize Location"
//	when
//		System started
//	then
//		DemoLocation.postUpdate(new PointType("52.5200066,13.4049540"))
//end
//
//rule "Set random room temperatures"
//	when
//		System started or
//		Time cron "0 0/5 * * * ?"
//	then
//		Temperature?.members.forEach(temperature|
//			postUpdate(temperature, 20.0 + (25.0 - (Math::random * 50.0).intValue) / 10.0)
//		)
//end
//
//rule "Set daily max and min temperature"
//when
//	Item Weather_Temperature changed or
//	Time cron "0 0 0 * * ?" or
//	System started
//then
//	val max = Weather_Temperature.maximumSince(now.withTimeAtStartOfDay)
//	val min = Weather_Temperature.minimumSince(now.withTimeAtStartOfDay)
//	if( max != null && min != null) {
//		postUpdate(Weather_Temp_Max, max.state)
//		postUpdate(Weather_Temp_Min, min.state)
//	}
//end
//
//// Creates an item that stores the last update time of this item
//rule "Records last weather update time"
//when
//  Item Weather_Temperature received update
//then
//  postUpdate(Weather_LastUpdate, new DateTimeType())
//end
//
//rule "Set random wifi variations"
//    when
//        System started or
//        Time cron "/20 * * * * ?"
//    then
//        postUpdate(Wifi_Level, (Math::random * 4.0).intValue)
//end
//
//rule "Set random image URLs"
//    when
//        Time cron "/10 * * * * ?"
//    then
//        val url = urlList.get(random.nextInt(urlList.length))
//        val res = resList.get(random.nextInt(resList.length))
//
//        postUpdate(ImageURL, url + "/" + res)
//end
//
//rule "Volume"
//	when
//		Item Volume received command
//	then
//		if(receivedCommand instanceof PercentType) {
//			setMasterVolume(receivedCommand)
//		} else {
//			if(receivedCommand==INCREASE) increaseMasterVolume(20)
//			if(receivedCommand==DECREASE) decreaseMasterVolume(20)	
//		}
//end
//
//rule "Select Radio Station"
//	when
//		Item Radio_Station received command
//	then
//		switch(receivedCommand) {
//			case 0 : playStream(null)
//			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
//			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
//			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
//			case 4 : playStream("http://stream.laut.fm/club93")
//		}
//end

// vim: syntax=Xtend
